{
  "id": "toolgun_modes/various_parameters",
  "icon": "minecraft:book",
  "category": "the_vmod:toolgun_modes",
  "name": "Various Parameters",
  "sortnum": 0,
  "pages": [
    {
      "type": "patchouli:text",
      "text": "Player can change visual parameters per VEntity, however each player can set an upper/lower limit on each parameter for themselves$(br)$(li)$(l)Width$() - Determines visual width of a constraint$(li)$(l)Fullbright$() - Determines whenever constraint will always be bright, or use brightness values from the world$(li)$(l)Segments$() - Amount of visual segments thing will have (Rope) ",
      "title": "Visual Parameters"
    },
    "$(li)$(l)Use Tube Renderer$() - If enabled, will use tube renderer (Rope). Best visual result will be if you set Hitpos to \"Centered In Block\" and disable \"Allow Twisting\". All other combinations are kinda ugly$(li2)$(l)Allow Twisting$() - If enabled, will lerp rotation for each segment. If disabled and hit pos is not \"Centered In Block\", one segment can twist pretty ugly$(li)$(l)Texture Options$() - Advanced texture options$(li2)$(l)Length UV Start$() - Start pos of texture for length ",
    "$(li2)$(l)Length UV Step Multiplier$() - Amount of texture lengths renderer will loop per unit length$(li2)$(l)Width UV Start$() - Start pos of texture for width$(li2)$(l)Width UV Multiplier$() - Amount of texture lengths renderer will loop per unit width$(li)$(l)RGBA$() - Controls color$(br)",
    {
      "type": "patchouli:text",
      "text": "$(li)$(l)Max Force$() - Determines how much force a constraint can apply before giving up and stopping working. \u003c0 for max$(li)$(l)Stiffness$() - Determines how stiff a constraint is. \u003c0 for max$(li)$(l)Fixed Distance$() - If \u003c0, then calculates distance between points itself, if \u003e\u003d0, then uses given distance instead.$(li)$(l)Hitpos Modes$() - If constraint needs positions, this option will appear$(li2)$(l)Normal$() - Will use hit position as is ",
      "title": "IDK Parameters"
    },
    "$(li2)$(l)Centered On Side$() - Will get the face of a block hit position is on, and use center of that face as position.$(li2)$(l)Centered In Block$() - Will get the block hit position is on, and use center of the block as position$(li2)$(l)Precise Placement$() - Will get the face of a block hit position is on, create n^n points (determined by Precise Placement Assist Sides) uniformly distributed across that face, and use closest point to hit position (will light up green) ",
    "$(li)$(l)Placement Assist Scroll Step$() - Determines how big scroll step is of rotation in Placement Assist. In degrees$(li)$(l)Distance From Block$() - Determines how far away object will be after finishing Placement Assist "
  ]
}