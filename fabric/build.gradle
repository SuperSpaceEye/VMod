plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

repositories {
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name = 'Terraformers'
        url = "https://maven.terraformersmc.com/"
    }
    maven {
        url = "https://repo.essential.gg/repository/maven-public"
    }
    maven { url = "https://mvn.devos.one/snapshots/" } // Create Fabric, Porting Lib, Forge Tags, Milk Lib, Registrate Fabric
    mavenCentral()
}

dependencies {
    include modImplementation("net.spaceeye:valkyrien-ship-schematics-$project.minecraft_version-$project.name:$project.vss_version") {transitive = false}
    include implementation("org.jgrapht:jgrapht-core:1.5.2")

    include(implementation(annotationProcessor("com.github.bawnorton.mixinsquared:mixinsquared-fabric:0.3.5-beta.2")) { transitive = false })

    api 'org.joml:joml-primitives:1.10.0'
    api 'org.joml:joml:1.10.4'

    common(project(path: ":common", configuration: "namedElements")) { transitive = false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive = false }

    modApi("org.valkyrienskies:valkyrienskies-120-fabric:${project.vs2_version}") { transitive = false }
    compileOnly("org.valkyrienskies.core:api:${project.vs_core_version}") { transitive = false }
    compileOnly("org.valkyrienskies.core:api-game:${project.vs_core_version}") { transitive = false }
    compileOnly("org.valkyrienskies.core:util:${project.vs_core_version}") { transitive = false }
    compileOnly("org.valkyrienskies.core:impl:${project.vs_core_version}") { transitive = false }

    // Kotlin
    modImplementation("net.fabricmc:fabric-language-kotlin:1.10.10+kotlin.1.9.10")
    api "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.7.21"
    api "org.jetbrains.kotlin:kotlin-reflect:1.7.21"

    implementation(include("gg.essential:elementa:${project.elementaVersion}"))
    modImplementation(include("gg.essential:universalcraft-1.20.1-fabric:${project.ucVersion}"))

    modApi "curse.maven:forge-config-api-port-fabric-547434:4583000"

    // Configured
    modLocalRuntime "curse.maven:configured-fabric-667378:4166864"    // Configured version 2.0.2 for Minecraft 1.19.3
    // Mod Menu
    modLocalRuntime "com.terraformersmc:modmenu:5.0.2"

    modCompileOnly("com.simibubi.create:create-fabric-${minecraft_version}:${create_fabric_version}") { transitive = false }

    modImplementation "net.fabricmc:fabric-loader:${project.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"
    // Remove the next line if you don't want to depend on the API
    modApi("dev.architectury:architectury-fabric:${project.architectury_version}")
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }

    from(rootProject.file("common/src/main/resources")) {
        include("data/*/patchouli_books/")
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
    archiveBaseName.set("${archiveBaseName.get()}-Fabric-${minecraft_version}")
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}